---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude'

    Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
#nos quedamos con las de mayor interes 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' 

airbnb_selected <-airbnb[c('City', 'Room.Type', 'Neighbourhood', 'Accommodates', 'Bathrooms', 'Bedrooms', 'Beds', 'Price', 'Square.Feet', 'Guests.Included', 'Extra.People', 'Review.Scores.Rating', 'Latitude', 'Longitude')]
head(airbnb_selected)
summary(airbnb_selected)
```

```{r}
#Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.
airbnb_filtered <- airbnb_selected[airbnb_selected$City == "Madrid" &  airbnb_selected$Room.Type == "Entire home/apt" & airbnb_selected$Neighbourhood != "", ]
df_madrid <- airbnb_filtered[, !colnames(airbnb_filtered) %in% c("Room.Type", "City")]
head(df_madrid)
summary(df_madrid)

```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
#Creamos la nueva columna Square.Meters con los valores ya en metros
df_madrid$Square.Meters <- df_madrid$Square.Feet * 0.092903
head(df_madrid)

```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
cat("En el listado hay", sum(is.na(df_madrid$Square.Meters))," apartamentos con valor NA en metros cuadrados \n")
porcentaje_na_meters <- mean(is.na(df_madrid$Square.Meters)) * 100
cat("Es un" , porcentaje_na_meters, "% del listado \n")
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
cat("Hay", length(which(df_madrid$Square.Meters==0))," apartamentos con 0 metros cuadrados \n")

porcentaje_ceros <- mean(df_madrid$Square.Meters[!is.na(df_madrid$Square.Meters)] == 0) * 100
cat("El ", porcentaje_ceros, "% de los valores distintos a NA con ceros \n")

```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid$Square.Meters <- replace(df_madrid$Square.Meters, df_madrid$Square.Meters == 0, NA)

```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
library(ggplot2)
ggplot(df_madrid, aes(df_madrid$Square.Meters)) +geom_histogram()
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
#Pasamos a NA los que tengan menos de 20m2
df_madrid$Square.Meters[df_madrid$Square.Meters < 20] <- NA
#Vemos ahora como queda
summary(df_madrid$Square.Meters)

#Vemos que porcentaje queda ahora
cat("En el listado hay", sum(is.na(df_madrid$Square.Meters))," apartamentos con valor NA en metros cuadrados \n")
porcentaje_na_meters_now <- mean(is.na(df_madrid$Square.Meters)) * 100
cat("Es un" , porcentaje_na_meters_now, "% del listado \n")

```

```{r}
#Pintamos en nuevo histograma
library(ggplot2)
ggplot(df_madrid, aes(df_madrid$Square.Meters)) +geom_histogram()
```

```{r}
#Veo que solo hay un piso de más de 250m2, lo quito tambien
df_madrid$Square.Meters[df_madrid$Square.Meters > 250] <- NA

library(ggplot2)
ggplot(df_madrid, aes(df_madrid$Square.Meters)) +geom_histogram()
```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    library(dplyr)

    #cuento los NA por Neighbourhood
    df_meters_nas <- df_madrid |> group_by(Neighbourhood) |> summarise(num_na = sum(is.na(Square.Meters)), num_total = n())
    #miro los barrios donde todos sus pisos tiene NA
    barrios_con_todos_na <- df_meters_nas[df_meters_nas$num_na == df_meters_nas$num_total, ]$Neighbourhood
    #elimino con filter
    df_madrid <- df_madrid |> filter(!Neighbourhood %in% barrios_con_todos_na)
    ```

    ------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    ```{r}
    library(dplyr)


    #test ANOVA
    anova_result <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
    anova_summary <- summary(anova_result) 
    print(anova_summary)

    pvalor <- anova_summary[[1]][["Pr(>F)"]][1]
    cat("\nEl p-valor es ", pvalor ," lo que sugiere grandes diferencias entre los barrios \n")


    ```

    ------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

    ```{r}
    library(dplyr)

    tky <- TukeyHSD(aov(Square.Meters ~ Neighbourhood, data = df_madrid))
    tky.result<-data.frame(tky$Neighbourhood)
    cn <-sort(unique(df_madrid$Neighbourhood))
    resm <- matrix(NA, length(cn),length(cn))
    rownames(resm) <- cn
    colnames(resm) <- cn
    resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
    resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)] 
    diag(resm) <- 1

    print(resm)
    ```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

    ```{r}
    library(dplyr)
    library(dendextend)

    # Copio el test de Tukey del ejercicio anterior
    tky <- TukeyHSD(aov(Square.Meters ~ Neighbourhood, data = df_madrid))
    tky.result <- data.frame(tky$Neighbourhood)
    cn <- sort(unique(df_madrid$Neighbourhood))
    resm <- matrix(NA, length(cn), length(cn))
    rownames(resm) <- cn
    colnames(resm) <- cn
    resm[lower.tri(resm)] <- round(tky.result$p.adj, 4)
    resm[upper.tri(resm)] <- t(resm)[upper.tri(resm)]
    diag(resm) <- 1

    #matriz de distancias
    df_madrid_dist <- as.dist(1 - resm)

    # clustering jerárquico
    df_madrid_tree <- hclust(df_madrid_dist, method = "complete")
    df_madrid_dend <- as.dendrogram(df_madrid_tree)

    # d endrograma
    clusters <- cutree(df_madrid_dend, h=0.95)
    plot(color_branches(df_madrid_dend, h=0.95),leaflab="none")

    # Mostrar el dendrograma
    plot(dend_colored, main = "Dendrograma de Barrios Basado en p-Valores", ylab = "Distancia")

    ```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

Entre 0.2 y 0.4 estaría bien para quedarnos con 3 clusters.

```{r}
library(dplyr)
library(dendextend)

# Copio el test de Tukey del ejercicio anterior
tky <- TukeyHSD(aov(Square.Meters ~ Neighbourhood, data = df_madrid))
tky.result <- data.frame(tky$Neighbourhood)
cn <- sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn), length(cn))
rownames(resm) <- cn
colnames(resm) <- cn
resm[lower.tri(resm)] <- round(tky.result$p.adj, 4)
resm[upper.tri(resm)] <- t(resm)[upper.tri(resm)]
diag(resm) <- 1

#matriz de distancias
df_madrid_dist <- as.dist(1 - resm)

# clustering jerárquico
df_madrid_tree <- hclust(df_madrid_dist, method = "complete")
df_madrid_dend <- as.dendrogram(df_madrid_tree)

# endrograma
clusters <- cutree(df_madrid_dend, h=0.95)
plot(color_branches(df_madrid_dend, h=0.95),leaflab="none")

# Mostrar el dendrograma
plot(dend_colored, main = "Dendrograma de Barrios Basado en p-Valores", ylab = "Distancia")
abline(h=0.3,col="red")
```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}
#Ajustamos el corte para los clusters a 0.3
clusters <- cutree(df_madrid_tree, h=0.3)

#Agregamos columna 'neighb_id' 
df_madrid <- df_madrid %>% mutate(neighb_id = clusters[match(Neighbourhood, names(clusters))])
```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}

set.seed(12345)
df_madrid_no_na <- df_madrid |> filter(!is.na(Square.Meters))
idx<-sample(1:nrow(df_madrid_no_na),nrow(df_madrid)*0.7)
df_madrid<-df_madrid[idx,]
df_madrid.test <-df_madrid[-idx,]
model_df_madrid<-lm(Neighbourhood~.,data=df_madrid.train)
summary(model_df_madrid)


```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
set.seed(12345)
# Me quedo con estas columnas que creo aportan valor


# Seleccionar las columnas relevantes
relevant_columns <- c("Neighbourhood", "Accommodates", "Bathrooms", "Bedrooms", "Beds", "Price", "Guests.Included", "Extra.People", "Review.Scores.Rating", "neighb_id")

# Dividir los datos en entrenamiento y prueba según la disponibilidad de Square.Meters
train_data <- df_madrid[!is.na(df_madrid$Square.Meters), ]
test_data <- df_madrid[is.na(df_madrid$Square.Meters), ]

# Convertir Neighbourhood y neighb_id a factores
train_data$Neighbourhood <- as.factor(train_data$Neighbourhood)
test_data$Neighbourhood <- as.factor(test_data$Neighbourhood)
train_data$neighb_id <- as.factor(train_data$neighb_id)
test_data$neighb_id <- as.factor(test_data$neighb_id)

# Ajustar el modelo de regresión lineal múltiple
model <- lm(Square.Meters ~ ., data = train_data[, c(relevant_columns, "Square.Meters")])

# Resumen del modelo
summary(model)

# Predecir los valores faltantes en el conjunto de prueba
predicted_values <- predict(model, newdata = test_data[, relevant_columns])

# Asignar los valores predichos a los datos originales
df_madrid$Square.Meters[is.na(df_madrid$Square.Meters)] <- predicted_values

# Verificar los valores predichos
head(df_madrid[is.na(df_madrid$Square.Meters), ])

```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

Bedrooms tiene un valor de p muy bajo

Estos valores miden la varianza, R-squared: 0.7655, Adjusted R-squared: 0.6788

Lo que supone un 67.88% de la variabilidad para los metros cuadrados

Y tenemos un PValor bajo con \< 2.2e-16

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
# Convertir variables en df_madrid a factores
df_madrid$Neighbourhood <- as.factor(df_madrid$Neighbourhood)
df_madrid$neighb_id <- as.factor(df_madrid$neighb_id)

# Crear un nuevo dataframe
new_apartment <- data.frame(Neighbourhood = factor("Sol", levels = levels(df_madrid$Neighbourhood)),Accommodates = 6,Bathrooms = 1,Bedrooms = 3,Beds = 3,Price = 80,Guests.Included = 1,Extra.People = 10,Review.Scores.Rating = 80,neighb_id = factor(1, levels = levels(df_madrid$neighb_id)))

predicted_sq_meters <- predict(model, newdata = new_apartment)
cat("Predicted Square Meters:", predicted_sq_meters, "\n")

```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
library(dplyr)
df_missing_sq_meters <- df_madrid %>% filter(is.na(Square.Meters))

# Asegúrate de que las variables sean del tipo correcto
df_missing_sq_meters$Neighbourhood <- factor(df_missing_sq_meters$Neighbourhood, levels = levels(df_madrid$Neighbourhood))
df_missing_sq_meters$neighb_id <- factor(df_missing_sq_meters$neighb_id, levels = levels(df_madrid$neighb_id))

# Predicción de Square.Meters para los datos con NA
predicted_sq_meters <- predict(model, newdata = df_missing_sq_meters)

# Agregar las predicciones al dataframe original
df_madrid <- df_madrid %>% mutate(Square.Meters = ifelse(is.na(Square.Meters), predicted_sq_meters, Square.Meters))


```

------------------------------------------------------------------------
